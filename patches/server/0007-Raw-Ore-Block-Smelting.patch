From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MrFishCakes <FinlayOxby@outlook.com>
Date: Sun, 30 Jul 2023 16:27:12 +0100
Subject: [PATCH] Raw Ore Block Smelting

One raw ore block will smelt into 9 ingots of the type. Can be toggeled per-world for each raw ore type

diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 751eac0e8746c4c804ced32f42a2b6973c20bb6e..81f8c299c62efd9e0e5b6ec4da5eaf288b630d7f 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -385,6 +385,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
             if (gg.pufferfish.pufferfish.PufferfishConfig.enableAsyncMobSpawning) mobSpawnExecutor.start(); // Pufferfish
             org.purpurmc.purpur.task.BossBarTask.startAll(); // Purpur
             org.purpurmc.purpur.task.BeehiveTask.instance().register(); // Purpur
+            org.graphitemc.graphite.recipe.GraphiteRecipes.registerRecipes(); // Graphite
             return true;
         }
     }
diff --git a/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
index 997d0fab71eacc6466ffe3bc8f6349e5813d6d49..a26c1556c7d5995c424f0719379b047e323e6b45 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
@@ -374,7 +374,7 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
 
             int i = blockEntity.getMaxStackSize();
 
-            if (!blockEntity.isLit() && AbstractFurnaceBlockEntity.canBurn(world.registryAccess(), irecipe, blockEntity.items, i)) {
+            if (!blockEntity.isLit() && AbstractFurnaceBlockEntity.canBurn(world.registryAccess(), irecipe, blockEntity.items, i, blockEntity)) {
                 // CraftBukkit start
                 CraftItemStack fuel = CraftItemStack.asCraftMirror(itemstack);
 
@@ -403,7 +403,7 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
                 }
             }
 
-            if (blockEntity.isLit() && AbstractFurnaceBlockEntity.canBurn(world.registryAccess(), irecipe, blockEntity.items, i)) {
+            if (blockEntity.isLit() && AbstractFurnaceBlockEntity.canBurn(world.registryAccess(), irecipe, blockEntity.items, i, blockEntity)) {
                 // CraftBukkit start
                 if (irecipe != null && blockEntity.cookingProgress == 0) {
                     CraftItemStack source = CraftItemStack.asCraftMirror(blockEntity.items.get(0));
@@ -444,10 +444,10 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
         if (usedLavaFromUnderneath) blockEntity.items.set(1, ItemStack.EMPTY); // Purpur
     }
 
-    private static boolean canBurn(RegistryAccess registryManager, @Nullable Recipe<?> recipe, NonNullList<ItemStack> slots, int count) {
+    private static boolean canBurn(RegistryAccess registryManager, @Nullable Recipe<?> recipe, NonNullList<ItemStack> slots, int count, AbstractFurnaceBlockEntity blockEntity) { // Graphite - Pass AbstractFurnaceBlockEntity
         if (!((ItemStack) slots.get(0)).isEmpty() && recipe != null) {
             ItemStack itemstack = recipe.getResultItem(registryManager);
-
+            if (!AbstractFurnaceBlockEntity.canBurnGraphite((CookingRecipe<?>) recipe.toBukkitRecipe(), blockEntity)) return false; // Graphite - Smelt Raw Ore Blocks
             if (itemstack.isEmpty()) {
                 return false;
             } else {
@@ -461,7 +461,7 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
     }
 
     private static boolean burn(Level world, BlockPos blockposition, RegistryAccess iregistrycustom, @Nullable Recipe<?> irecipe, NonNullList<ItemStack> nonnulllist, int i) { // CraftBukkit
-        if (irecipe != null && AbstractFurnaceBlockEntity.canBurn(iregistrycustom, irecipe, nonnulllist, i)) {
+        if (irecipe != null && AbstractFurnaceBlockEntity.canBurn(iregistrycustom, irecipe, nonnulllist, i, (AbstractFurnaceBlockEntity) world.getBlockEntity(blockposition))) { // Graphite - Raw Ore Block Smelting
             ItemStack itemstack = (ItemStack) nonnulllist.get(0);
             ItemStack itemstack1 = irecipe.getResultItem(iregistrycustom);
             ItemStack itemstack2 = (ItemStack) nonnulllist.get(2);
@@ -714,4 +714,32 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
         // Paper end
 
     }
+    // Graphite start - Smelt Raw Ore Blocks
+    private static boolean canBurnGraphite(CookingRecipe<?> cookingRecipe, AbstractFurnaceBlockEntity blockEntity) {
+        if (!"graphite".equalsIgnoreCase(cookingRecipe.getKey().getNamespace())) return true;
+
+        final ItemStack inputItem = blockEntity.items.get(0);
+        if (blockEntity instanceof BlastFurnaceBlockEntity) {
+            if (inputItem.is(Items.RAW_COPPER_BLOCK)) {
+                return blockEntity.level.graphiteConfiguration().misc.recipes.rawOreBlockSmelting.rawCopper.allowBlasting;
+            } else if (inputItem.is(Items.RAW_GOLD_BLOCK)) {
+                return blockEntity.level.graphiteConfiguration().misc.recipes.rawOreBlockSmelting.rawGold.allowBlasting;
+            } else if (inputItem.is(Items.RAW_IRON_BLOCK)) {
+                return blockEntity.level.graphiteConfiguration().misc.recipes.rawOreBlockSmelting.rawIron.allowBlasting;
+            }
+        }
+
+        if (blockEntity instanceof FurnaceBlockEntity) {
+            if (inputItem.is(Items.RAW_COPPER_BLOCK)) {
+                return blockEntity.level.graphiteConfiguration().misc.recipes.rawOreBlockSmelting.rawCopper.allowFurnace;
+            } else if (inputItem.is(Items.RAW_GOLD_BLOCK)) {
+                return blockEntity.level.graphiteConfiguration().misc.recipes.rawOreBlockSmelting.rawGold.allowFurnace;
+            } else if (inputItem.is(Items.RAW_IRON_BLOCK)) {
+                return blockEntity.level.graphiteConfiguration().misc.recipes.rawOreBlockSmelting.rawIron.allowFurnace;
+            }
+        }
+
+        return false;
+    }
+    // Graphite end - Smelt Raw Ore Blocks
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index e63fa71d64996aeb7df361872eacdf3541706ae9..7f383d80c7eae09d630457f14bc02b6730ef085c 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1103,6 +1103,7 @@ public final class CraftServer implements Server {
         org.spigotmc.SpigotConfig.registerCommands(); // Spigot
         io.papermc.paper.command.PaperCommands.registerCommands(this.console); // Paper
         org.graphitemc.graphite.command.GraphiteCommands.registerCommands(this.console); // Graphite
+        org.graphitemc.graphite.recipe.GraphiteRecipes.registerRecipes(); // Graphite
         org.purpurmc.purpur.PurpurConfig.registerCommands(); // Purpur
         this.overrideAllCommandBlockCommands = this.commandsConfiguration.getStringList("command-block-overrides").contains("*");
         this.ignoreVanillaPermissions = this.commandsConfiguration.getBoolean("ignore-vanilla-permissions");
diff --git a/src/main/java/org/graphitemc/graphite/configuration/GlobalConfiguration.java b/src/main/java/org/graphitemc/graphite/configuration/GlobalConfiguration.java
index f164304700b51cc2c2b4e3c9131aecccd2f62bda..26b73ff342b41efe20935bc2ee516fbef9221aff 100644
--- a/src/main/java/org/graphitemc/graphite/configuration/GlobalConfiguration.java
+++ b/src/main/java/org/graphitemc/graphite/configuration/GlobalConfiguration.java
@@ -33,4 +33,49 @@ public class GlobalConfiguration extends ConfigurationPart {
 
     }
 
+    public Recipes recipes;
+
+    public class Recipes extends ConfigurationPart {
+
+        public RawOreBlockSmelting rawOreBlockSmelting;
+
+        public class RawOreBlockSmelting extends ConfigurationPart {
+
+            public RawCopper rawCopper;
+
+            public class RawCopper extends ConfigurationPart {
+
+                public int furnaceCookTime = 1800;
+                public double furnaceExperience = 6.3D;
+                public int blastingCookTime = 900;
+                public double blastingExperience = 6.3D;
+
+            }
+
+            public RawGold rawGold;
+
+            public class RawGold extends ConfigurationPart {
+
+                public int furnaceCookTime = 1800;
+                public double furnaceExperience = 9.0D;
+                public int blastingCookTime = 900;
+                public double blastingExperience = 9.0D;
+
+            }
+
+            public RawIron rawIron;
+
+            public class RawIron extends ConfigurationPart {
+
+                public int furnaceCookTime = 1800;
+                public double furnaceExperience = 6.3D;
+                public int blastingCookTime = 900;
+                public double blastingExperience = 6.3D;
+
+            }
+
+        }
+
+    }
+
 }
diff --git a/src/main/java/org/graphitemc/graphite/configuration/LevelConfigurations.java b/src/main/java/org/graphitemc/graphite/configuration/LevelConfigurations.java
index 0cc2500677721c57a636242df01784a4e8906eca..e54719544e5c66fa98ca60e92a4436b0e12b962a 100644
--- a/src/main/java/org/graphitemc/graphite/configuration/LevelConfigurations.java
+++ b/src/main/java/org/graphitemc/graphite/configuration/LevelConfigurations.java
@@ -43,6 +43,45 @@ public class LevelConfigurations extends ConfigurationPart {
         public boolean fixMC31819 = true;
         public boolean fixMC93018 = true;
 
+        public Recipes recipes;
+
+        public class Recipes extends ConfigurationPart {
+
+            public RawOreBlockSmelting rawOreBlockSmelting;
+
+            public class RawOreBlockSmelting extends ConfigurationPart {
+
+                public RawCopper rawCopper;
+
+                public class RawCopper extends ConfigurationPart {
+
+                    public boolean allowFurnace = true;
+                    public boolean allowBlasting = true;
+
+                }
+
+                public RawGold rawGold;
+
+                public class RawGold extends ConfigurationPart {
+
+                    public boolean allowFurnace = true;
+                    public boolean allowBlasting = true;
+
+                }
+
+                public RawIron rawIron;
+
+                public class RawIron extends ConfigurationPart {
+
+                    public boolean allowFurnace = true;
+                    public boolean allowBlasting = true;
+
+                }
+
+            }
+
+        }
+
     }
 
 }
diff --git a/src/main/java/org/graphitemc/graphite/recipe/GraphiteRecipes.java b/src/main/java/org/graphitemc/graphite/recipe/GraphiteRecipes.java
new file mode 100644
index 0000000000000000000000000000000000000000..980fd2ae15c07f1c4ba4b4638fc7a4b6fc842140
--- /dev/null
+++ b/src/main/java/org/graphitemc/graphite/recipe/GraphiteRecipes.java
@@ -0,0 +1,60 @@
+package org.graphitemc.graphite.recipe;
+
+import org.bukkit.Bukkit;
+import org.bukkit.Material;
+import org.bukkit.NamespacedKey;
+import org.bukkit.inventory.BlastingRecipe;
+import org.bukkit.inventory.FurnaceRecipe;
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.inventory.Recipe;
+import org.graphitemc.graphite.configuration.GlobalConfiguration;
+
+import java.util.HashMap;
+import java.util.Map;
+
+public final class GraphiteRecipes {
+
+    private GraphiteRecipes() {
+    }
+
+    private static final Map<NamespacedKey, Recipe> RECIPES = new HashMap<>();
+
+    private static final NamespacedKey RAW_COPPER_BLOCK_FURNACE = new NamespacedKey("graphite", "raw_copper_block_furnace");
+    private static final NamespacedKey RAW_COPPER_BLOCK_BLASTING = new NamespacedKey("graphite", "raw_copper_block_blasting");
+    private static final NamespacedKey RAW_GOLD_BLOCK_FURNACE = new NamespacedKey("graphite", "raw_gold_block_furnace");
+    private static final NamespacedKey RAW_GOLD_BLOCK_BLASTING = new NamespacedKey("graphite", "raw_gold_block_blasting");
+    private static final NamespacedKey RAW_IRON_BLOCK_FURNACE = new NamespacedKey("graphite", "raw_iron_block_furnace");
+    private static final NamespacedKey RAW_IRON_BLOCK_BLASTING = new NamespacedKey("graphite", "raw_iron_block_blasting");
+
+    static {
+        RECIPES.put(RAW_COPPER_BLOCK_FURNACE, new FurnaceRecipe(RAW_COPPER_BLOCK_FURNACE, new ItemStack(Material.COPPER_INGOT, 9), Material.RAW_COPPER_BLOCK,
+                (float) GlobalConfiguration.get().recipes.rawOreBlockSmelting.rawCopper.furnaceExperience,
+                GlobalConfiguration.get().recipes.rawOreBlockSmelting.rawCopper.furnaceCookTime));
+        RECIPES.put(RAW_COPPER_BLOCK_BLASTING, new BlastingRecipe(RAW_COPPER_BLOCK_BLASTING, new ItemStack(Material.COPPER_INGOT, 9), Material.RAW_COPPER_BLOCK,
+                (float) GlobalConfiguration.get().recipes.rawOreBlockSmelting.rawCopper.blastingExperience,
+                GlobalConfiguration.get().recipes.rawOreBlockSmelting.rawCopper.blastingCookTime));
+
+        RECIPES.put(RAW_GOLD_BLOCK_FURNACE, new FurnaceRecipe(RAW_GOLD_BLOCK_FURNACE, new ItemStack(Material.GOLD_INGOT, 9), Material.RAW_GOLD_BLOCK,
+                (float) GlobalConfiguration.get().recipes.rawOreBlockSmelting.rawGold.furnaceExperience,
+                GlobalConfiguration.get().recipes.rawOreBlockSmelting.rawGold.furnaceCookTime));
+        RECIPES.put(RAW_GOLD_BLOCK_BLASTING, new BlastingRecipe(RAW_GOLD_BLOCK_BLASTING, new ItemStack(Material.GOLD_INGOT, 9), Material.RAW_GOLD_BLOCK,
+                (float) GlobalConfiguration.get().recipes.rawOreBlockSmelting.rawGold.blastingExperience,
+                GlobalConfiguration.get().recipes.rawOreBlockSmelting.rawGold.blastingCookTime));
+
+        RECIPES.put(RAW_IRON_BLOCK_FURNACE, new FurnaceRecipe(RAW_IRON_BLOCK_FURNACE, new ItemStack(Material.IRON_INGOT, 9), Material.RAW_IRON_BLOCK,
+                (float) GlobalConfiguration.get().recipes.rawOreBlockSmelting.rawIron.furnaceExperience,
+                GlobalConfiguration.get().recipes.rawOreBlockSmelting.rawIron.furnaceCookTime));
+        RECIPES.put(RAW_IRON_BLOCK_BLASTING, new BlastingRecipe(RAW_IRON_BLOCK_BLASTING, new ItemStack(Material.IRON_INGOT, 9), Material.RAW_IRON_BLOCK,
+                (float) GlobalConfiguration.get().recipes.rawOreBlockSmelting.rawIron.blastingExperience,
+                GlobalConfiguration.get().recipes.rawOreBlockSmelting.rawIron.blastingCookTime));
+    }
+
+    public static void registerRecipes() {
+        RECIPES.forEach((key, recipe) -> {
+            if (Bukkit.getRecipe(key) != null) Bukkit.removeRecipe(key);
+
+            Bukkit.addRecipe(recipe);
+        });
+    }
+
+}
