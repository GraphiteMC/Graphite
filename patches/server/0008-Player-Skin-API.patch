From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MrFishCakes <FinlayOxby@outlook.com>
Date: Sun, 30 Jul 2023 22:56:26 +0100
Subject: [PATCH] Player Skin API

Ability to change a player's skin easily through new API

diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 018cf3cd424ac85e8d84179bc05ab241f0a00827..de46bf1e7c1b4611c75862028e433ed3d4eb4123 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -3377,4 +3377,125 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         this.getHandle().connection.send(new net.minecraft.network.protocol.game.ClientboundPlayerCombatKillPacket(getEntityId(), io.papermc.paper.adventure.PaperAdventure.asVanilla(message)));
     }
     // Purpur end
+    // Graphite start - Player Skin API
+    private static final String PROFILES_URL = "https://api.mojang.com/users/profiles/minecraft/%s";
+    private static final String SESSIONS_URL = "https://sessionserver.mojang.com/session/minecraft/profile/%s/?unsigned=false";
+
+    private static final Map<UUID, Pair<String, String>> SKIN_CACHE = new HashMap<>();
+    private static final Map<String, UUID> NAME_CACHE = new HashMap<>();
+
+    @Override
+    public void setPlayerSkin(@NotNull String name) {
+        UUID uniqueId = fetchUniqueId(name);
+        if (uniqueId == null) return;
+
+        Pair<String, String> data = fetchSkinData(uniqueId);
+        if (data == null) return;
+
+        com.destroystokyo.paper.profile.PlayerProfile playerProfile = getPlayerProfile();
+
+        playerProfile.setProperty(new com.destroystokyo.paper.profile.ProfileProperty("textures", data.getFirst(), data.getSecond()));
+        setPlayerProfile(playerProfile);
+
+        hidePlayer(this);
+        showPlayer(this);
+    }
+
+    @Override
+    public void setPlayerSkin(@NotNull UUID uniqueId) {
+        Pair<String, String> data = fetchSkinData(uniqueId);
+        if (data == null) return;
+
+        com.destroystokyo.paper.profile.PlayerProfile playerProfile = getPlayerProfile();
+
+        playerProfile.setProperty(new com.destroystokyo.paper.profile.ProfileProperty("textures", data.getFirst(), data.getSecond()));
+        setPlayerProfile(playerProfile);
+
+        hidePlayer(this);
+        showPlayer(this);
+    }
+
+    @Override
+    public void setPlayerSkin(@NotNull String texture, @NotNull String signature) {
+        com.destroystokyo.paper.profile.PlayerProfile playerProfile = getPlayerProfile();
+
+        playerProfile.setProperty(new com.destroystokyo.paper.profile.ProfileProperty("textures", texture, signature));
+        setPlayerProfile(playerProfile);
+
+        hidePlayer(this);
+        showPlayer(this);
+    }
+
+    private @org.jetbrains.annotations.Nullable UUID fetchUniqueId(@NotNull String name) {
+        try {
+            return java.util.concurrent.CompletableFuture.supplyAsync(() -> {
+                String lowerName = name.toLowerCase(java.util.Locale.ENGLISH);
+                if (NAME_CACHE.containsKey(lowerName)) {
+                    return NAME_CACHE.get(lowerName);
+                }
+
+                try {
+                    java.net.URL url = new java.net.URL(String.format(PROFILES_URL, lowerName));
+                    java.io.InputStreamReader streamReader = new java.io.InputStreamReader(url.openStream());
+
+                    UUID uniqueId = UUID.fromString(com.google.gson.JsonParser.parseReader(streamReader).getAsJsonObject().get("id").getAsString());
+
+                    NAME_CACHE.put(lowerName, uniqueId);
+
+                    return uniqueId;
+                } catch (IOException ex) {
+                    Bukkit.getLogger().log(Level.SEVERE, "There was an error fetching profile data for " + lowerName, ex);
+                    return null;
+                }
+            }).get(10L, java.util.concurrent.TimeUnit.SECONDS);
+        } catch (InterruptedException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "The thread was interrupted when fetching Mojang name data", ex);
+            return null;
+        } catch (java.util.concurrent.TimeoutException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Mojang name data request timed out after 10 seconds", ex);
+            return null;
+        } catch (java.util.concurrent.ExecutionException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Mojang name data request threw an exception", ex);
+            return null;
+        }
+    }
+
+    private @org.jetbrains.annotations.Nullable Pair<String, String> fetchSkinData(@NotNull UUID uniqueId) {
+        try {
+            return java.util.concurrent.CompletableFuture.supplyAsync(() -> {
+                if (SKIN_CACHE.containsKey(uniqueId)) {
+                    return SKIN_CACHE.get(uniqueId);
+                }
+
+                try {
+                    java.net.URL url = new java.net.URL(String.format(SESSIONS_URL, uniqueId.toString()));
+                    java.io.InputStreamReader streamReader = new java.io.InputStreamReader(url.openStream());
+
+                    com.google.gson.JsonObject properties = com.google.gson.JsonParser.parseReader(streamReader).getAsJsonObject().get("properties").getAsJsonArray()
+                            .get(0).getAsJsonObject();
+
+                    final String texture = properties.get("value").getAsString();
+                    final String signature = properties.get("signature").getAsString();
+
+                    Pair<String, String> result = Pair.of(texture, signature);
+
+                    SKIN_CACHE.put(uniqueId, result);
+                    return result;
+                } catch (IOException ex) {
+                    Bukkit.getLogger().log(Level.SEVERE, "There was an error fetching session data for " + uniqueId, ex);
+                    return null;
+                }
+            }).get(10L, java.util.concurrent.TimeUnit.SECONDS);
+        } catch (InterruptedException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "The thread was interrupted when fetching Mojang skin data", ex);
+            return null;
+        } catch (java.util.concurrent.TimeoutException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Mojang skin data request timed out after 10 seconds", ex);
+            return null;
+        } catch (java.util.concurrent.ExecutionException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Mojang skin data request threw an exception", ex);
+            return null;
+        }
+    }
+    // Graphite end - Player Skin API
 }
