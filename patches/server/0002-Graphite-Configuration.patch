From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MrFishCakes <FinlayOxby@outlook.com>
Date: Tue, 18 Jul 2023 15:04:44 +0100
Subject: [PATCH] Graphite Configuration


diff --git a/src/main/java/dev/graphitemc/graphite/GraphiteConfig.java b/src/main/java/dev/graphitemc/graphite/GraphiteConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..387ba01bfa1fa6606fc7582ba3da1d1185380b29
--- /dev/null
+++ b/src/main/java/dev/graphitemc/graphite/GraphiteConfig.java
@@ -0,0 +1,153 @@
+package dev.graphitemc.graphite;
+
+import com.google.common.base.Throwables;
+import com.google.common.collect.ImmutableMap;
+import dev.graphitemc.graphite.command.GraphiteCommand;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.world.level.block.Blocks;
+import org.bukkit.Bukkit;
+import org.bukkit.command.Command;
+import org.bukkit.configuration.ConfigurationSection;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.logging.Level;
+
+public class GraphiteConfig {
+
+    private static final String HEADER = """
+            This is the main configuration file for Graphite.
+            More options, settings and features will be added overtime. This file will be updated accordingly to those features!""";
+    private static File CONFIG_FILE;
+    public static YamlConfiguration config;
+
+    private static Map<String, Command> commands;
+
+    public static int version;
+    static boolean verbose;
+
+    public static void init(File configFile) {
+        CONFIG_FILE = configFile;
+        config = new YamlConfiguration();
+        try {
+            config.load(CONFIG_FILE);
+        } catch (IOException ignored) {
+        } catch (InvalidConfigurationException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not load graphite.yml, please correct your syntax errors", ex);
+            throw Throwables.propagate(ex);
+        }
+
+        config.options().header(HEADER);
+        config.options().copyDefaults(true);
+        verbose = getBoolean("verbose", false);
+        set("verbose", false);
+
+        commands = new HashMap<>();
+        commands.put("graphite", new GraphiteCommand("graphite"));
+
+        version = getInt("config-version", 1);
+        set("config-version", 1);
+
+        readConfig(GraphiteConfig.class, null);
+        Blocks.rebuildCache();
+    }
+
+    protected static void log(String message) {
+        if (verbose) log(Level.INFO, message);
+    }
+
+    protected static void log(Level level, String message) {
+        Bukkit.getLogger().log(level, message);
+    }
+
+    public static void registerCommands() {
+        for (Map.Entry<String, Command> entry : commands.entrySet()) {
+            MinecraftServer.getServer().server.getCommandMap().register(entry.getKey(), "Graphite", entry.getValue());
+        }
+    }
+
+    static void readConfig(Class<?> clazz, Object instance) {
+        for (Method method : clazz.getDeclaredMethods()) {
+            if (Modifier.isPrivate(method.getModifiers())) {
+                if (method.getParameterTypes().length == 0 && method.getReturnType() == Void.TYPE) {
+                    try {
+                        method.setAccessible(true);
+                        method.invoke(instance);
+                    } catch (InvocationTargetException ex) {
+                        throw Throwables.propagate(ex.getCause());
+                    } catch (Exception ex) {
+                        Bukkit.getLogger().log(Level.SEVERE, "Error invoking " + method, ex);
+                    }
+                }
+            }
+        }
+
+        try {
+            config.save(CONFIG_FILE);
+        } catch (IOException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not save " + CONFIG_FILE, ex);
+        }
+    }
+
+    private static void set(String path, Object val) {
+        config.addDefault(path, val);
+        config.set(path, val);
+    }
+
+    private static String getString(String path, String def) {
+        config.addDefault(path, def);
+        return config.getString(path, config.getString(path));
+    }
+
+    private static boolean getBoolean(String path, boolean def) {
+        config.addDefault(path, def);
+        return config.getBoolean(path, config.getBoolean(path));
+    }
+
+    private static double getDouble(String path, double def) {
+        config.addDefault(path, def);
+        return config.getDouble(path, config.getDouble(path));
+    }
+
+    private static int getInt(String path, int def) {
+        config.addDefault(path, def);
+        return config.getInt(path, config.getInt(path));
+    }
+
+    private static <T> List getList(String path, T def) {
+        config.addDefault(path, def);
+        return config.getList(path, config.getList(path));
+    }
+
+    static Map<String, Object> getMap(String path, Map<String, Object> def) {
+        if (def != null && config.getConfigurationSection(path) == null) {
+            config.addDefault(path, def);
+            return def;
+        }
+
+        return toMap(config.getConfigurationSection(path));
+    }
+
+    private static Map<String, Object> toMap(ConfigurationSection section) {
+        ImmutableMap.Builder<String, Object> builder = ImmutableMap.builder();
+        if (section != null) {
+            for (String key : section.getKeys(false)) {
+                Object obj = section.get(key);
+                if (obj != null) {
+                    builder.put(key, obj instanceof ConfigurationSection val ? toMap(val) : obj);
+                }
+            }
+        }
+
+        return builder.build();
+    }
+
+}
diff --git a/src/main/java/dev/graphitemc/graphite/GraphiteWorldConfig.java b/src/main/java/dev/graphitemc/graphite/GraphiteWorldConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..8637a546a98d314ab3e04e686683449e765a67c6
--- /dev/null
+++ b/src/main/java/dev/graphitemc/graphite/GraphiteWorldConfig.java
@@ -0,0 +1,125 @@
+package dev.graphitemc.graphite;
+
+import com.google.common.base.Throwables;
+import org.bukkit.Bukkit;
+import org.bukkit.World;
+import org.bukkit.configuration.ConfigurationSection;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.List;
+import java.util.Map;
+import java.util.logging.Level;
+
+import static dev.graphitemc.graphite.GraphiteConfig.log;
+
+public class GraphiteWorldConfig {
+
+    private static final String HEADER = """
+            This is the main configuration file for "%s".
+            More options, settings and features will be added overtime. This file will be updated accordingly to those features!""";
+
+    public YamlConfiguration config;
+    private final String worldName;
+    private final World.Environment environment;
+
+    public GraphiteWorldConfig(String worldName, World.Environment environment, File configFile) {
+        this.worldName = worldName;
+        this.environment = environment;
+
+        init(configFile);
+    }
+
+    public void init(File configFile) {
+        log("-------- World Settings For [" + worldName + "] --------");
+        try {
+            if (!configFile.exists()) {
+                configFile.createNewFile();
+            }
+        } catch (IOException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Unable to create file " + configFile, ex);
+            throw Throwables.propagate(ex);
+        }
+
+        this.config = new YamlConfiguration();
+        try {
+            config.load(configFile);
+        } catch (IOException ignored) {
+        } catch (InvalidConfigurationException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, String.format("Could not load %s, please correct your syntax errors", configFile.getName()), ex);
+            throw Throwables.propagate(ex);
+        }
+
+        config.options().header(String.format(HEADER, worldName));
+        config.options().copyDefaults(true);
+
+        for (Method method : getClass().getDeclaredMethods()) {
+            if (Modifier.isPrivate(method.getModifiers())) {
+                if (method.getParameterTypes().length == 0 && method.getReturnType() == Void.TYPE) {
+                    try {
+                        method.setAccessible(true);
+                        method.invoke(this);
+                    } catch (InvocationTargetException ex) {
+                        throw Throwables.propagate(ex.getCause());
+                    } catch (Exception ex) {
+                        Bukkit.getLogger().log(Level.SEVERE, "Error invoking " + method, ex);
+                    }
+                }
+            }
+        }
+
+        try {
+            config.save(configFile);
+        } catch (IOException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not save " + configFile, ex);
+        }
+    }
+
+    private void set(String path, Object val) {
+        config.addDefault("world-settings." + path, val);
+        config.set("world-settings." + path, val);
+    }
+
+    private ConfigurationSection getConfigurationSection(String path) {
+        return config.getConfigurationSection("world-settings." + path);
+    }
+
+    private String getString(String path, String def) {
+        config.addDefault("world-settings." + path, def);
+        return config.getString("world-settings." + path, def);
+    }
+
+    private boolean getBoolean(String path, boolean def) {
+        config.addDefault("world-settings." + path, def);
+        return config.getBoolean("world-settings." + path, def);
+    }
+
+    private double getDouble(String path, double def) {
+        config.addDefault("world-settings." + path, def);
+        return config.getDouble("world-settings." + path, def);
+    }
+
+    private int getInt(String path, int def) {
+        config.addDefault("world-settings." + path, def);
+        return config.getInt("world-settings." + path, def);
+    }
+
+    private <T> List<?> getList(String path, T def) {
+        config.addDefault("world-settings." + path, def);
+        return config.getList("world-settings." + path, Collections.emptyList());
+    }
+
+    public String someString;
+
+    private void something() {
+        someString = getString("SomeString", "Some default string");
+    }
+
+}
diff --git a/src/main/java/dev/graphitemc/graphite/command/GraphiteCommand.java b/src/main/java/dev/graphitemc/graphite/command/GraphiteCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..b86a7eb7a03ef9f1498c8a21d69e92f062ba3adc
--- /dev/null
+++ b/src/main/java/dev/graphitemc/graphite/command/GraphiteCommand.java
@@ -0,0 +1,66 @@
+package dev.graphitemc.graphite.command;
+
+import dev.graphitemc.graphite.GraphiteConfig;
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.format.NamedTextColor;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerLevel;
+import org.bukkit.Bukkit;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+import org.jetbrains.annotations.NotNull;
+
+import java.io.File;
+import java.util.Collections;
+import java.util.List;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
+
+public class GraphiteCommand extends Command {
+
+    public GraphiteCommand(String name) {
+        super(name);
+        this.description = "Graphite related commands";
+        this.usageMessage = "/graphite [reload | version]";
+        this.setPermission("bukkit.command.graphite");
+    }
+
+    @Override
+    public @NotNull List<String> tabComplete(@NotNull CommandSender sender, @NotNull String alias, @NotNull String[] args) throws IllegalArgumentException {
+        if (args.length == 1) {
+            return Stream.of("reload", "version").filter(arg -> arg.startsWith(args[0].toLowerCase())).collect(Collectors.toList());
+        }
+
+        return Collections.emptyList();
+    }
+
+    @Override
+    public boolean execute(@NotNull CommandSender sender, @NotNull String commandLabel, @NotNull String[] args) {
+        if (!testPermission(sender)) return true;
+
+        if (args.length != 1) {
+            sender.sendMessage(Component.text("Usage: " + usageMessage, NamedTextColor.RED));
+            return false;
+        }
+
+        if (args[0].equalsIgnoreCase("reload")) {
+            Command.broadcastCommandMessage(sender, Component.text("Please note that this command is not supported and may cause issues.", NamedTextColor.RED));
+            Command.broadcastCommandMessage(sender, Component.text("If you encounter any issues please use the /stop command to restart your server.", NamedTextColor.RED));
+
+            MinecraftServer console = MinecraftServer.getServer();
+            GraphiteConfig.init((File) console.options.valueOf("graphite-settings"));
+            for (ServerLevel level : console.getAllLevels()) {
+                level.graphiteConfig.init(new File(level.getWorld().getWorldFolder(), "graphite-world.yml"));
+            }
+
+            console.server.reloadCount++;
+            Command.broadcastCommandMessage(sender, Component.text("Graphite config reload complete.", NamedTextColor.GREEN));
+        } else if (args[0].equalsIgnoreCase("version")) {
+            Command verCmd = Bukkit.getServer().getCommandMap().getCommand("version");
+            if (verCmd != null) return verCmd.execute(sender, commandLabel, new String[0]);
+        }
+
+        return true;
+    }
+
+}
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 12124d6fbc0406bb62bd95a0f7bab68afa43377c..5358a40c08acd6ecc08d1e0d736fd86e8e48f9ea 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -228,6 +228,15 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         }
         org.purpurmc.purpur.PurpurConfig.registerCommands();
         // Purpur end
+        // Graphite start
+        try {
+            dev.graphitemc.graphite.GraphiteConfig.init((java.io.File) options.valueOf("graphite-settings"));
+        } catch (Exception e) {
+            DedicatedServer.LOGGER.error("Unable to load server configuration", e);
+            return false;
+        }
+        dev.graphitemc.graphite.GraphiteConfig.registerCommands();
+        // Graphite end
         com.destroystokyo.paper.VersionHistoryManager.INSTANCE.getClass(); // load version history now
         io.papermc.paper.brigadier.PaperBrigadierProviderImpl.INSTANCE.getClass(); // init PaperBrigadierProvider
         // Paper end
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 221d1d0e1b4b46de6ebca5faac09bbda875fae17..81e79b0ab8a800c0abd186f7b45614e9762fe2a6 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -218,6 +218,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
     private boolean forceTime; // Purpur
     private final RandomSequences randomSequences;
     public long lastMidTickExecuteFailure; // Paper - execute chunk tasks mid tick
+    public final dev.graphitemc.graphite.GraphiteWorldConfig graphiteConfig; // Graphite
 
     // CraftBukkit start
     public final LevelStorageSource.LevelStorageAccess convertable;
@@ -653,6 +654,10 @@ public class ServerLevel extends Level implements WorldGenLevel {
         super(iworlddataserver, resourcekey, minecraftserver.registryAccess(), worlddimension.type(), minecraftserver::getProfiler, false, flag, i, minecraftserver.getMaxChainedNeighborUpdates(), gen, biomeProvider, env, spigotConfig -> minecraftserver.paperConfigurations.createWorldConfig(io.papermc.paper.configuration.PaperConfigurations.createWorldContextMap(convertable_conversionsession.levelDirectory.path(), iworlddataserver.getLevelName(), resourcekey.location(), spigotConfig)), executor); // Paper - Async-Anti-Xray - Pass executor
         this.pvpMode = minecraftserver.isPvpAllowed();
         this.convertable = convertable_conversionsession;
+        // Graphite start
+        this.graphiteConfig = new dev.graphitemc.graphite.GraphiteWorldConfig(iworlddataserver.getLevelName(), env, new java.io.File(getWorld().getWorldFolder(), "graphite-world.yml"));
+        this.graphiteConfig.init(new java.io.File(getWorld().getWorldFolder(), "graphite-world.yml"));
+        // Graphite end
         this.uuid = WorldUUID.getUUID(convertable_conversionsession.levelDirectory.path().toFile());
         // CraftBukkit end
         this.players = Lists.newArrayList();
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 7fd37983efee051b7e8dc07618950afa40987e5a..a73067800fdcdb44d551ba1015ce8df644e048b8 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1071,6 +1071,7 @@ public final class CraftServer implements Server {
         org.spigotmc.SpigotConfig.init((File) console.options.valueOf("spigot-settings")); // Spigot
         this.console.paperConfigurations.reloadConfigs(this.console);
         org.purpurmc.purpur.PurpurConfig.init((File) console.options.valueOf("purpur-settings")); // Purpur
+        dev.graphitemc.graphite.GraphiteConfig.init((File) console.options.valueOf("graphite-settings")); // Graphite
         for (ServerLevel world : this.console.getAllLevels()) {
             // world.serverLevelData.setDifficulty(config.difficulty); // Paper - per level difficulty
             world.setSpawnSettings(world.serverLevelData.getDifficulty() != Difficulty.PEACEFUL && config.spawnMonsters, config.spawnAnimals); // Paper - per level difficulty (from MinecraftServer#setDifficulty(ServerLevel, Difficulty, boolean))
@@ -1087,6 +1088,7 @@ public final class CraftServer implements Server {
             }
             world.spigotConfig.init(); // Spigot
             world.purpurConfig.init(); // Purpur
+            world.graphiteConfig.init(new File(world.getWorld().getWorldFolder(), "graphite-world.yml")); // Graphite
         }
 
         Plugin[] pluginClone = pluginManager.getPlugins().clone(); // Paper
@@ -1103,6 +1105,7 @@ public final class CraftServer implements Server {
         org.spigotmc.SpigotConfig.registerCommands(); // Spigot
         io.papermc.paper.command.PaperCommands.registerCommands(this.console); // Paper
         org.purpurmc.purpur.PurpurConfig.registerCommands(); // Purpur
+        dev.graphitemc.graphite.GraphiteConfig.registerCommands(); // Graphite
         this.overrideAllCommandBlockCommands = this.commandsConfiguration.getStringList("command-block-overrides").contains("*");
         this.ignoreVanillaPermissions = this.commandsConfiguration.getBoolean("ignore-vanilla-permissions");
 
@@ -2947,6 +2950,12 @@ public final class CraftServer implements Server {
             return getProperties().properties;
         }
         // Purpur end
+        // Graphite start - Graphite configuration
+        @Override
+        public YamlConfiguration getGraphiteConfig() {
+            return dev.graphitemc.graphite.GraphiteConfig.config;
+        }
+        // Graphite end - Graphite configuration
 
         @Override
         public void restart() {
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index f30c6e09adb3a6aa485357f859fc2a22227350c9..b93f912b791476dda8b355fedc114cc8c9a3824f 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -2479,4 +2479,10 @@ public class CraftWorld extends CraftRegionAccessor implements World {
         return this.adventure$pointers;
     }
     // Paper end
+    // Graphite start - Graphite configuration
+    @Override
+    public org.bukkit.configuration.file.YamlConfiguration getGraphiteConfig() {
+        return getHandle().graphiteConfig.config;
+    }
+    // Graphite end - Graphite configuration
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index 0bc9b176a3b86a5b4153a2110621534c692d8240..68fcff421217fc082e0120cc0579e82f9ceafd3b 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -186,6 +186,13 @@ public class Main {
                         .defaultsTo(new File("pufferfish.yml"))
                         .describedAs("Yml file");
                 // Purpur end
+                // Graphite start
+                acceptsAll(asList("graphite", "graphite-settings"), "File for graphite settings")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("graphite.yml"))
+                        .describedAs("Yml file");
+                // Graphite end
 
                 // Paper start
                 acceptsAll(asList("server-name"), "Name of the server")
